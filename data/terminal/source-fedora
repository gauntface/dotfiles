#!/bin/bash

# Make Nautilus open with same command as OS X
open() {
    xdg-open "$1" > /dev/null 2>&1
}

# Function to check for updates and install them
check_and_install_updates() {
    # Run package manager update command
    sudo dnf -y update
}

# Define the paths for the last_update and pending_update files
DOTFILES_CONFIG_DIR="${HOME}/.config/dotfiles"
LAST_UPDATE_FILE="${DOTFILES_CONFIG_DIR}/last_update"
PENDING_UPDATE_FILE="${DOTFILES_CONFIG_DIR}/pending_update"

# Create dotfiles config directory if it doesn't exist
mkdir -p "${DOTFILES_CONFIG_DIR}"

# Create last_update file if it doesn't exist
if [ ! -f "${LAST_UPDATE_FILE}" ]; then
    date +%s > "${LAST_UPDATE_FILE}"
fi

# Function to check if an update is pending
is_update_in_progress() {
    if [ -f "${PENDING_UPDATE_FILE}" ]; then
        local pending_time
        local current_time
        local time_diff

        pending_time=$(cat "${PENDING_UPDATE_FILE}")
        current_time=$(date +%s)
        time_diff=$((current_time - pending_time))

        # If the pending update is less than 2 hours old
        if [ $time_diff -lt 7200 ]; then
            return 0  # True, update is pending
        else
            # Remove stale pending update file
            rm "${PENDING_UPDATE_FILE}"
        fi
    fi
    return 1  # False, no pending update
}

# Function to check if a week has passed since the last update
is_update_due() {
    local last_update_time
    local current_time
    local time_since_last_update

    last_update_time=$(cat "${LAST_UPDATE_FILE}")
    current_time=$(date +%s)
    time_since_last_update=$((current_time - last_update_time))

    # Check if a week (7 days) has passed
    if [ $time_since_last_update -ge $((7*24*3600)) ]; then
        return 0  # True, update is due
    fi
    return 1  # False, update is not due
}

# Check if a week has passed since the last update check and no update is pending
if is_update_due && ! is_update_in_progress; then
    echo "ðŸ“¦  Update system..."
    echo ""

    # Create pending update file
    date +%s > "${PENDING_UPDATE_FILE}"

    # Perform the update
    check_and_install_updates

    # Update the last update time
    date +%s > "${LAST_UPDATE_FILE}"

    # Remove the pending update file
    rm "${PENDING_UPDATE_FILE}"
fi
